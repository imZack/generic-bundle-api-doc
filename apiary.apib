FORMAT: 1A
HOST: http://www.google.com

# MXcloud Generic
Notes API is a *short texts saving* service similar to its physical paper presence on your table.

# Group Cellular
Notes related resources of the **Cellular API**

## Cellular Collection [/network/cellulars]
### List all Cellulars [GET]

The Collection response has following attributes:

+ Response 200 (application/json)

        [
          {
            "id": 1,
            "enable": 1,
            "pinCode": "0000",
            "name": "wwan1",
            "username": "",
            "subnet": "255.255.255.252",
            "password": "",
            "authType": "PAP",
            "ip": "111.70.146.125",
            "enableAuth": 0,
            "gateway": "111.70.146.126",
            "signal": -96,
            "atPort": "/dev/ttyUSB1",
            "dns": ["168.95.1.1" , "168.95.192.1"],
            "status": 1,
            "apn": "internet",
            "operatorName": "Chunghwa Telecom",
            "modemPort": "/dev/cdc-wdm1"
          }
        ]

## Cellular [/network/cellulars/{id}]
A single Cellular object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Cellular to perform action with. Has example value.

### Retrieve an Cellular [GET]

The response for GET has following attributes:

- **id** (number, `1`): Identifier for an Cellular interface.
- **name** (string, `eth0`): Indicate the interface name.
- **modemPort** (string, `/dev/cdc-wcm1`): Internally use modem port device node
- **atPort** (string, `/dev/ttyUSB1`): Internally use AT port device node
- **ip** (IP address, `111.70.146.125`): IP address for the Cellular interface.
- **gateway** (IP address, `192.168.3.254`): Gateway is a router or a proxy server that routes between networks.
- **subnet** (IP address, `255.255.255.252`): Cellular network's subnet mask.
- **dns** (IP address array): The Domain Name System (DNS) is a hierarchical distributed naming system for computers, services, or any resource connected to the Internet or a private network.
- **enable** (number, `1`): Indicate the link status of Cellular interface should be set to up (`1`) or down (`0`).
- **pinCode** (string, `0000`): Use this code to auth when exits.
- **username** (string, ``): Indicate the username to enter pap/chap.
- **password** (string, ``): Indicate the password to enter pap/chap.
- **apn** (string, `internet`): Indicate apn of SIM card.
- **signal** (number, `99`): Indicate apn of SIM card.
- **enableAuth** (number, `0`): Indicate the authentication need to be done before dialUp
- **authType** (string, `PAP`): Indicate type of authentication such as 'PAP','CHAP'
- **status** (number, `0`): Indicate current status of connection, '0' / '1'
- **operatorName** (string, ``): Indicate current operator name if exit


+ Response 200 (application/json; charset=utf-8)

      {
        "id": 1,
        "enable": 1,
        "pinCode": "0000",
        "name": "wwan1",
        "username": "",
        "subnet": "255.255.255.252",
        "password": "",
        "authType": "PAP",
        "ip": "111.70.146.125",
        "enableAuth": 0,
        "gateway": "111.70.146.126",
        "signal": -96,
        "atPort": "/dev/ttyUSB1",
        "dns": ["168.95.1.1" , "168.95.192.1"],
        "status": 1,
        "apn": "internet",
        "operatorName": "Chunghwa Telecom",
        "modemPort": "/dev/cdc-wdm1"
      }


### Update an Cellular [PUT]

The request for PUT has following attributes:

- **id** (required, number, `1`): Identifier for an Cellular interface.
- **enable** (optional, number, `1`): Indicate the link status of Cellular interface should be set to up (`1`) or down (`0`).
- **pinCode** (optional, string, `0000`): Use this code to auth when exits.
- **username** (optional, string, ``): Indicate the username to enter pap/chap.
- **password** (optional, string, ``): Indicate the password to enter pap/chap.
- **apn** (optional, string, ``): Indicate apn of SIM card.
- **enableAuth** (optional, number, `0`): Indicate the authentication need to be done before dialUp
- **authType** (optional, string, ``): Indicate type of authentication such as 'PAP','CHAP'


The response for PUT is same as that for GET.

The error response has following attributes:

- **status** (required, number, `1100`): Status code for error message.
- **message** (required, string): Error message in English.

+ Request (application/json)

      {
        "id": 1,
        "enable": 1,
        "pinCode": "0000",
        "username": "",
        "password": "",
        "authType": "PAP",
        "enableAuth": 0,
        "apn": "internet",
      }

+ Response 200 (application/json)

      {
        "id": 1,
        "enable": 1,
        "pinCode": "0000",
        "name": "wwan1",
        "username": "",
        "subnet": "255.255.255.252",
        "password": "",
        "authType": "PAP",
        "ip": "111.70.146.125",
        "enableAuth": 0,
        "gateway": "111.70.146.126",
        "signal": -96,
        "atPort": "/dev/ttyUSB1",
        "dns": ["168.95.1.1" , "168.95.192.1"],
        "status": 1,
        "apn": "internet",
        "operatorName": "Chunghwa Telecom",
        "modemPort": "/dev/cdc-wdm1"
      }

+ Response 400 (application/json)

      {
          "message": "Unable to apply!"
      }

# Group Ethernet
Notes related resources of the **Ethernet API**

## Ethernet Collection [/network/ethernets]
### List all Ethernets [GET]

The Collection response has following attributes:

+ Response 200 (application/json; charset=utf-8)

        [
            {
                "id":1,
                "name": "eth0",
                "ip": "192.168.3.127",
                "mac": "FF:FF:FF:FF:FF:FF",
                "netmask": "255.255.255.0",
                "subnet": "192.168.3.0",
                "gateway": "192.168.3.254",
                "currentStatus":1,
                "enable":1,
                "enableDhcp":0
            },
            {
                "id":2,
                "name": "eth1",
                "ip": "192.168.3.127",
                "mac": "FF:FF:FF:FF:FF:FF",
                "netmask": "255.255.255.0",
                "subnet": "192.168.3.0",
                "gateway": "192.168.3.254",
                "currentStatus":1,
                "enable":1,
                "enableDhcp":0
            }
        ]

### Update some Ethernets [PUT]

The collection request/response for update has following attributes:

+ Request (application/json; charset=utf-8)

        [
            {
                "id":2,
                "ip": "192.168.100.127",
                "netmask": "255.255.255.0",
                "subnet": "192.168.100.0",
                "gateway": "192.168.100.254",
                "enable":1,
                "enableDhcp":0
            }
        ]

+ Response 200 (application/json; charset=utf-8)

        [
            {
                "id":1,
                "name": "eth0",
                "ip": "192.168.3.127",
                "mac": "FF:FF:FF:FF:FF:FF",
                "netmask": "255.255.255.0",
                "subnet": "192.168.3.0",
                "gateway": "192.168.3.254",
                "currentStatus":1,
                "enable":1,
                "enableDhcp":0
            },
            {
                "id":2,
                "name": "eth1",
                "ip": "192.168.100.127",
                "mac": "FF:FF:FF:FF:FF:FF",
                "netmask": "255.255.255.0",
                "subnet": "192.168.100.0",
                "gateway": "192.168.100.254",
                "currentStatus":1,
                "enable":1,
                "enableDhcp":0
            }
        ]

## Ethernet [/network/ethernets/{id}]
A single Ethernet object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Ethernet to perform action with. Has example value.

### Retrieve an Ethernet [GET]

The response for GET has following attributes:

- **id** (required, number, `1`): Identifier for an Ethernet interface.
- **name** (required, string, `eth0`): Indicate the interface name.
- **ip** (required, IP address, `192.168.3.127`): IP address for the Ethernet interface.
- **mac** (required, MAC, `FF:FF:FF:FF:FF:FF`): The identical MAC address.
- **netmask** (required, IP address, `255.255.255.0`): Subnet mask for the Ethernet interface.
- **subnet** (required, IP address, `192.168.3.0`): A subnet (short for "subnetwork") is an identifiably separate part of an organization's network.
- **gateway** (required, IP address, `192.168.3.254`): Gateway is a router or a proxy server that routes between networks.
- **currentStatus** (required, number `1`): Current status for the Ethernet interface, 0 for down and 1 for up.
- **enable** (required, number, `1`): Indicate the link status of Ethernet interface should be set to up (`1`) or down (`0`).
- **enableDhcp** (required, number, `0`): Enable (`1`) the dhcp client or using the static IP (`0`).

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "id":1,
                "name": "eth0",
                "ip": "192.168.3.127",
                "mac": "FF:FF:FF:FF:FF:FF",
                "netmask": "255.255.255.0",
                "subnet": "192.168.3.0",
                "gateway": "192.168.3.254",
                "currentStatus":1,
                "enable":1,
                "enableDhcp":0
            }

### Update an Ethernet [PUT]

The request for PUT has following attributes:

- **ip** (required, IP address, `192.168.3.127`): IP address for the Ethernet interface.
- **netmask** (required, IP address, `255.255.255.0`): Subnet mask for the Ethernet interface.
- **subnet** (required, IP address, `192.168.3.0`): A subnet (short for "subnetwork") is an identifiably separate part of an organization's network.
- **gateway** (required, IP address, `192.168.3.254`): Gateway is a router or a proxy server that routes between networks.
- **enable** (required, number, `1`): Indicate the link status of Ethernet interface should be set to up (`1`) or down (`0`).
- **enableDhcp** (required, number, `0`): Enable (`1`) the dhcp client or using the static IP (`0`).

The response for PUT is same as that for GET.

The error response has following attributes:

- **status** (required, number, `1100`): Status code for error message.
- **message** (required, string): Error message in English.

+ Request (application/json; charset=utf-8)

        {
            "id": 2,
            "ip": "192.168.3.127",
            "netmask": "255.255.255.0",
            "subnet": "192.168.3.0",
            "gateway": "192.168.3.254",
            "enable":1,
            "enableDhcp":0
        }

+ Response 200 (application/json; charset=utf-8)

        {
            "id":2,
            "name": "eth1",
            "ip": "192.168.100.127",
            "mac": "FF:FF:FF:FF:FF:FF",
            "netmask": "255.255.255.0",
            "subnet": "192.168.100.0",
            "gateway": "192.168.100.254",
            "currentStatus":1,
            "enable":1,
            "enableDhcp":0
        }

+ Response 404 (application/json; charset=utf-8)

        {
            "status": 2101,
            "message": "Interface not found!"
        }


# Group GPS
Notes related resources of the **GPS API** (future work will retrieve the location by GPS device, currently will be user input)

## GPS [/system/gps]
The GPS location information with all its details

### Retrieve a GPS location [GET]

The response for GET has following attributes:

- **lat** (required, number, `26.983949495`): Latitude
- **lon** (required, number, `121.551980142`): Longitude
- **device** (required, string, `/dev/ttyACM0`, future): Indicate the GPS device name.
- **time** (required, string, `2014-06-06T07:04:24.000Z`, future): Timestamp of the retrieved GPS location.

+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            {
                "lat": 26.983949495,
                "lon": 121.551980142,
                "device": "/dev/ttyACM0",
                "time": "2014-06-06T07:04:24.000Z"
            }

### Update the GPS status [PUT]

The response for PUT has following attributes:

- **device** (required, string, `/dev/ttyACM0`, future): Indicate the GPS device name to be used.
- **lat** (required, number, `26.983949495`): Latitude
- **lon** (required, number, `121.551980142`): Longitude

+ Request  (application/json)

        {
            "device": "/dev/ttyACM0"
        }

+ Response 200 (application/json)

        {
            "device": "/dev/ttyACM0"
        }

+ Response 404 (application/json)

        {
            "status": 2101,
            "message": "Device not found!"
        }

+ Request  (application/json)

        {
            "lat": 26.983949495,
            "lon": 121.551980142
        }

+ Response 200 (application/json)

        {
            "lat": 26.983949495,
            "lon": 121.551980142
        }

+ Response 404 (application/json)

        {
            "status": 2201,
            "message": "Invalid value!"
        }


# Group Firmware
Notes related resources of the **Firmware API**

## Firmware [/system/firmware]
The firmware information with all its details

### Retrieve the firmware information [GET]

The response for GET has following attributes:

- **version** (required, string, `1.0.0`): The firmware version.
- **server** (required, string, `www.moxa.com`): Server to download the latest version of firmware.

+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            {
                "version": "1.0.0",
                "server": "www.moxa.com"
            }

### Update the firmware [PUT]

The response for PUT has following attributes:

- **upgrade** (required, number, `1`): The system will start to do firmware upgrading.
- **server** (required, string, `www.moxa.com`): Server to download the latest version of firmware.

+ Request  (application/json)

        {
            "upgrade": 1,
            "server": "www.moxa.com"
        }

+ Response 200 (application/json)

        {
            "upgrade": 1,
            "server": "www.moxa.com"
        }

## Check Firmware Version [/system/firmware/check]
Check the firmware version

### Retrieve the current and candidate firmware version [GET]

The response for GET has following attributes:

- **current** (required, string, `1.1.0`): The current firmware version.
- **candidate** (required, string, `1.1.0`): The candidate firmware version.
- **isLatest** (required, integer, `0`): Is current version the latest or not.

+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            {
                "current": "1.0.0",
                "candidate": "1.1.0",
                "isLatest": 1
            }


# Group ImportExport
Notes related resources of the **ImportExport API**

## Import [/system/import]
The importexport object allows user to import/export configuration files to/from the system.

### Import the system [PUT]
The request for PUT has following attributes:

- **reboot** (optional, number, `3`): Reboot delay time in seconds.
- **file.url** (required, string, `3`): Reboot delay time in seconds.
- **file.headers** (optional, object): Headers for fetch the file if necessary.

+ Request  (application/json)

        {
          "id": 3,
          "resource": "/system/import",
          "method": "put",
          "data": {
            "reboot": 3,
            "file": {
              "url": "http://192.168.31.81:5000/api/v1/download/1234",
              "headers": {
                "accessToken": "MOXAMOXA-TEST-SYSTEM"
              }
            }
          }
        }

+ Response 200 (application/json)

        {}

## Export [/system/export]

### Export the system [GET]

The response for GET would be a file.
(From web to backend)

+ Request  (application/json)


+ Response 200 (application/octet-stream)

        ```binary data goes here```

### Export the system [POST]
(From backend to bundle)
The response for GET has following attributes:

+ Request  (application/json)

        {
          "url": "https://server/upload",
          "headers": {
            "accessToken": "MOXAMOXA-TEST-SYSTEM"
          }
        }

+ Response 200 (application/json)

        {
          "url": "https://server/upload/xxxxxxx"
        }


# Group Reboot
Notes related resources of the **Reboot API**

## Reboot [/system/reboot]
The reboot object allows user to reboot the system

### Reboot the system [PUT]

The response for PUT has following attributes:

- **enable** (required, number, `1`): Indicate the system will be reboot soon.

+ Request  (application/json)

        {
            "enable": 1
        }

+ Response 200 (application/json)

        {
            "enable": 1
        }

+ Response 404 (application/json)

        {
            "status": 1002,
            "message": "Resource busy!"
        }

# Group Time
Notes related resources of the **Time API**

## Time [/system/time]
The system time information include NTP client settings

### Retrieve system time information [GET]

The response for GET has following attributes:

- **time** (string, `2014-10-21 00:00:00`): Current system time. (iso 8601)
- **timezone** (string, `+08,00,0`): System timezone settings.
- **ntp.enable** (boolean, `enable`): Enable/Disable Ntp client.
- **ntp.server** (string, `pool.ntp.org`): Ntp server.
- **ntp.interval** (integer, `86400`): Ntp update interval in seconds.

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "time": "2015-03-26T16:27:48.611441Z",
                "timezone": "+08:00,0",
                "ntp": {
                    "enable": 1,
                    "server": "pool.ntp.org",
                    "interval": 86400
                }
            }

### Update system time properties [PUT]

The response for PUT has following attributes:

+ Request  (application/json; charset=utf-8)

    + Body

            {
                "time": "2015-03-26T16:27:48.611441Z",
                "timezone": "+08:00,0",
                "ntp": {
                    "enable": 0,
                    "server": "pool.ntp.org",
                    "interval": 86400
                }
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "time": "2015-03-26T16:27:48.611441Z",
                "timezone": "+08:00,0",
                "ntp": {
                    "enable": 1,
                    "server": "pool.ntp.org",
                    "interval": 86400
                }
            }

# Group SSH
Status related resources of the **SSH Service**

## SSH [/network/ssh]

### Retreive SSH Settings [GET]

The response for GET has following attributes:

- **enable** (required, integer, 1): enable ssh service

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "enable": 1
            }


### Update system time properties [PUT]

The response for PUT has following attributes:

- **enable** (required, integer, 1): enable ssh service

+ Request  (application/json; charset=utf-8)

        {
            "enable": 1
        }

+ Response 200 (application/json; charset=utf-8)

        {
            "enable": 1
        }

# Group DHCP Server
Notes related resources of the **DHCP Server API**

## DHCP server Collection [/network/dhcpd]
### List all DHCP Interfaces [GET]

The Collection response has following attributes:

- **currentStatus** (required, integer, 1): DHCP server status, 1: server is on, 0: server is off.
- **collection** (required, object array): An object array to perform all queried entries.

+ Response 200 (application/json; charset=utf-8)

        {
            "currentStatus": 1,
            "collection": [
                {
                    "id": 1,
                    "name": "eth0",
                    "enable": 0,
                    "subnet": "192.168.3.0",
                    "netmask": "255.255.255.0",
                    "startIP": "192.168.3.100",
                    "endIP": "192.168.3.150",
                    "domainNameServers": ["8.8.8.8", "1.1.1.1", "2.2.2.2"],
                    "domainName": "cloud 5566",
                    "leaseTime": "3600"
                }
            ]
        }


## DHCP server [/network/dhcpd/{id}]

+ Parameters
    + id (required, number, `1`) ... ID of the request in the form of a integer

### List request DHCP Interfaces [GET]

The response has following attributes:

- **currentStatus** (required, integer, 1):  1: server is on, 0: server is off.
- **collection** (required, object array): An object array to perform all queried entries.

+ Response 200 (application/json; charset=utf-8)

        {
            "id": 1,
            "name": "eth0",
            "enable": 0,
            "subnet": "192.168.3.0",
            "netmask": "255.255.255.0",
            "startIP": "192.168.3.100",
            "endIP": "192.168.3.150",
            "domainNameServers": ["8.8.8.8", "1.1.1.1", "2.2.2.2"],
            "domainName": "cloud 5566",
            "leaseTime": "3600"
        }

### Update some DHCP Interfaces [PUT]

The collection request/response for update has following attributes:

- **currentStatus** (required, integer, 1): server status, 1: server is on, 0: server is off.
- **collection** (required, object array): An object array to perform all queried entries.
- **collection[]id** (required, integer): index
- **collection[]name** (required, string): interfece of DHCP server, user can select eth0 or eth1
- **collection[]enable** (required, integer): interfece DHCP server enable bit
- **collection[]subnet** (required, string): subnet
- **collection[]netmask** (required, string): netmask
- **collection[]startIP** (required, string): start IP of DHCP server
- **collection[]endIP** (required, string): end IP of DHCP server
- **collection[]domainNameServers** (optional, object array): an object array to save dns list
- **collection[]domainName** (optional, string): DHCP server domain name
- **collection[]leaseTime** (required, string): leasetime of DHCP server

Suppose user want to update DHCP server of eth0 interface

+ Request  (application/json; charset=utf-8)

        {
            "id": 1,
            "name": "eth0",
            "enable": 0,
            "subnet": "192.168.3.0",
            "netmask": "255.255.255.0",
            "startIP": "192.168.3.100",
            "endIP": "192.168.3.150",
            "domainNameServers": ["8.8.8.8", "1.1.1.1", "2.2.2.2"],
            "domainName": "cloud 7788",
            "leaseTime": "3600"
        }


+ Response 200 (application/json; charset=utf-8)

        {
            "id": 1,
            "name": "eth0",
            "enable": 0,
            "subnet": "192.168.3.0",
            "netmask": "255.255.255.0",
            "startIP": "192.168.3.100",
            "endIP": "192.168.3.150",
            "domainNameServers": ["8.8.8.8", "1.1.1.1", "2.2.2.2"],
            "domainName": "cloud 5566",
            "leaseTime": "3600"
        }

# Group DNS
Notes related resources of the **DNS API**

## DNS [/network/dns]
### List DNS Settings [GET]

The response has following attributes:

- **route_interface** (required, string): show the current dns corresponging interface
- **dns** (required, object array): show current running dns servers.
- **dns_list** (option, dictionary): show all interface and corresponding dns list

+ Response 200 (application/json; charset=utf-8)

        {
            "route_interface": "eth0",
            "dns": ["8.8.8.8", "8.8.4.4", "192.168.50.33"],
            "dns_list": {
              "eth0": [],
              "eth1": [],
              "wwlan0": []
            }
        }

### Update DNS Settings [PUT]

+ Request  (application/json; charset=utf-8)

        {
            "route_interface": "eth0",
            "dns": ["192.168.50.33"]
        }

+ Response 200 (application/json; charset=utf-8)

        {
            "route_interface": "eth0",
            "dns": ["192.168.50.33"],
            "dns_list": {
              "eth0": [],
              "eth1": [],
              "wwlan0": []
            }
        }


# Group Bandwidth
Notes related resources of the **Bandwidth API**

## Bandwidth [/network/bandwidth]
Monitor the cellular bandwidth and send notification if exceed the threshold.

### Retrieve the bandwidth setting and information [GET]

The response for GET has following attributes:

- **id** (required, number, `1`): Identifier for a cellular interface.
- **enable** (required, number, `1`): Indicate the monitoring of the interface should be started (`1`) or not (`0`).
- **interface** (required, string, "ppp0"): Indicate the monitoring interface name
- **info** (required, number, 50000): Indicate current 3G network bandwidth (Kbits).
- **threshold** (required, number, `50000`): Water mark to send the notification (Kbits).

+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            {
                "enable": 0,
                "interface": "ppp0",
                "info": 80000,
                "threshold": 50000
            }

### Update the Bandwidth monitoring setting [PUT]

The response for PUT has following attributes:

- **id** (required, number, `1`): Identifier for a cellular interface.
- **enable** (required, number, `1`): Indicate the monitoring of the interface should be started (`1`) or not (`0`).
- **threshold** (option, number, `50000`): Water mark to send the notification (Kbits).
- **reset** (option, number, 1 ): Notify bundle to reset the counter.

+ Request  (application/json)

        {
            "enable": 1,
            "reset": 0,
            "threshold": 50000
        }

+ Response 200 (application/json)

        {
            "enable": 1,
            "info": 123450,
            "reset": 0,
            "threshold": 50000
        }

+ Response 400 (application/json)

        {
            "status": 400,
            "message": "Invalid Input"
        }


# Group Status
Notes related resources of the **Status API**

## CPU status [/system/status/cpu]
### Get CPU Status data [GET]

The response has following attributes:

- **data** (required, object array): list of cpu status data.

+ Response 200 (application/json; charset=utf-8)

        [
            {
                "time": "2014-09-14T15:18:48Z",
                "percent": 54.1
            },
            {
                "time": "2014-09-14T15:19:48Z",
                "percent": 40.2
            },
            {
                "time": "2014-09-14T15:20:48Z",
                "percent": 35.9
            }
        ]


## Memory status [/system/status/memory]
### Get Memory Status data [GET]

The response has following attributes:

- **data** (required, object array): list of memory status data.

+ Response 200 (application/json; charset=utf-8)

        [
            {
                "time": "2014-09-14T15:18:48Z",
                "totalByte": 209715200,
                "usedByte": 52428800,
                "usedPercent": 25
            },
            {
                "time": "2014-09-14T15:19:48Z",
                "totalByte": 209715200,
                "usedByte": 52428800,
                "usedPercent": 25
            }
        ]


## Disk status [/system/status/disk]
### Get Disk Status data [GET]

The response has following attributes:

- **data** (required, object array): list of disk status data.

+ Response 200 (application/json; charset=utf-8)

        [
            {
                "time": "2014-09-14T15:18:48Z",
                "totalByte": 209715200,
                "usedByte": 52428800,
                "usedPercent": 50
            },
            {
                "time": "2014-09-14T15:19:48Z",
                "totalByte": 209715200,
                "usedByte": 52428800,
                "usedPercent": 60
            }
        ]


## System status [/system/status/showdata]
### Get System Status data [GET]

The response has following attributes:

- **hostname** (required, string): show hostname
- **firmware** (required, string): show firmware by kversion
- **uptime** (required, string): show up time of machine
- **storage** (required, string): show free storage size


+ Response 200 (application/json; charset=utf-8)

        {
            "hostname": "Moxa",
            "firmware": "MXcloudv1.0",
            "uptimeSec": 312956,
            "diskFreeByte": 583008256
        }

### Set system hostname [PUT]


+ Request  (application/json; charset=utf-8)

        {
            "hostname": "moxa"
        }


+ Response 200 (application/json; charset=utf-8)

        {
            "hostname": "moxa"
        }



# Group Watchdog
Notes related resources of the **Watchdog API**

## Watchdog [/system/watchdog]
### List Watchdog Register Process [GET]

The response has following attributes:

- **process** (required, object array): list of register watchdog.

+ Response 200 (application/json)

        [
            {
                "id" : 1,
                "process" : "process name",
                "path" : "/usr/bin/process_name"
            }
            {
                "id" : 2,
                "process" : "process name",
                "path" : "/usr/bin/process_name"

            }
        ]

### Add Process to watchdog [PUT]


+ Request  (application/json)

        {
            "process": "process_name",
            "path": "/usr/bin/process_name"
        }


+ Response 200 (application/json)

        {
            "id": 1,
            "message": "success"
        }

+ Response 400 (application/json)

        {
            "id": 1,
            "message": "Process already register"
        }

### Delete Monitor Process from watchdog [DELETE]
/system/watchdog/1

+ Request  (application/json)

        {
            "process": "process_name"
        }


+ Response 200 (application/json)

        {
            "status": 200
        }


# Group IP Route
Notes related resources of the **IPRoute API**

## IPRoute [/network/routes/interfaces]
### List Available Interfaces [GET]

+ Response 200 (application/json)

        ["eth0", "eth1"]

## IPRoute [/network/routes/default]
### Retrieve Default Gateway [GET]

The response has following attributes:

- **interface** (optional, string, `eth0`): interface to be set as the default gateway.
- **gateway** (optional, IP address, `192.168.31.254`): gateway address.

+ Response 200 (application/json)

        {
            "interface": "eth0",
            "gateway": "192.168.31.254"
        }

### Update Default Gateway [PUT]

The request and response has following attributes:

- **interface** (optional, string, `eth0`): interface to be set as the default gateway.
- **gateway** (optional, IP address, `192.168.31.254`): gateway address.

+ Request  (application/json)

        {}

+ Response 200 (application/json)

        {}

+ Request  (application/json)

        {
            "interface": "",
        }

+ Response 200 (application/json)

        {
            "interface": "",
        }

+ Request  (application/json)

        {
            "interface": "eth1",
            "gateway": "192.168.4.254"
        }

+ Response 200 (application/json)

        {
            "interface": "eth1",
            "gateway": "192.168.4.254"
        }

+ Response 404 (application/json)

        {
            "status": "40451",
            "message": "Update default gateway failed: Cellular is connected, the default gateway cannot be changed."
        }

## IPRoute [/network/routers]
### Update Router Information [PUT]

The request and response has following attributes:

- **name** (optional, string, `eth0`): interface name.
- **gateway** (optional, IP address, `192.168.31.254`): gateway address.

+ Request  (application/json)

        {
            "name": "eth1",
            "gateway": "192.168.4.254"
        }

+ Response 200 (application/json)

        {
            "name": "eth1",
            "gateway": "192.168.4.254"
        }


# Group Network
Notes related resources of the **network**

## Network Interface Information [/network/interfaces]
### Update the interface information [PUT]

The request for PUT has following attributes (this is an **event** message):

- **name** (required, string, `eth0`): Indicate the interface name.
- **ip** (required, IP address, `192.168.3.127`): IP address for the network interface.
- **netmask** (required, IP address, `255.255.255.0`): Subnet mask for the network interface.
- **subnet** (required, IP address, `192.168.3.0`): A subnet (short for "subnetwork") is an identifiably separate part of an organization's network.
- **gateway** (required, IP address, `192.168.3.254`): Gateway is a router or a proxy server that routes between networks.
- **dns** (required, IP address array): The Domain Name System (DNS) is a hierarchical distributed naming system for computers, services, or any resource connected to the Internet or a private network.

+ Request (application/json)

        {
            "name": "eth0",
            "ip":"192.168.3.127",
            "netmask":"255.255.255.0",
            "subnet":"192.168.3.0",
            "gateway":"192.168.3.254",
            "dns":["8.8.8.8", "8.8.4.4"],
        }

+ Response 200 (application/json)

        {
        }


# Group Remote/Async

## Remote Broker [/system/remote]
Remote broker service

The response for GET has following attributes:

- **enable** (integer, `1`): Start/Stop remote broker.

### Control remote broker [PUT]
Start/Stop remote broker

+ Request (application/json; charset=utf-8)

        {
          "enable": 1
        }


+ Response 200 (application/json; charset=utf-8)

        {}


## Job Collection [/jobs]
A set of jobs meta information.

### Retrieve jobs [GET]
Get all current exist jobs.

+ Response 200 (application/json; charset=utf-8)

        [
          {
            "id": 123145,
            "createdAt": "2014-12-17T06:27:58.220Z",
            "finishedAt": null,
            "status": "dispatching",
            "progress": 0,
            "totalCount": 2,
            "doneCount": 0,
            "errorCount": 0,
            "requests": [
              {
                "id": 2323,
                "method": "post",
                "resource": "/system/reboot",
                "__request": {
                  "destination": "00:0c:29:1c:e8:03",
                  "createdAt": "2014-12-17T06:27:58.220Z",
                  "finishedAt": null,
                  "timeout": 36000,
                  "status": "created",
                  "progress": 0,
                  "result": null
                }
              },
              {
                "id": 4444,
                "method": "post",
                "resource": "/system/reboot",
                "__request": {
                  "destination": "00:0c:29:1c:e8:04",
                  "createdAt": "2014-12-17T06:27:58.220Z",
                  "finishedAt": null,
                  "timeout": 36000,
                  "status": "created",
                  "progress": 0,
                  "result": null
                }
              }
            ]
          },
          {
            "id": 345235,
            "createdAt": "2014-12-17T06:27:58.220Z",
            "finishedAt": null,
            "status": "dispatching",
            "progress": 0,
            "totalCount": 1,
            "doneCount": 0,
            "errorCount": 0,
            "requests": [
              {
                "id": 5111,
                "method": "get",
                "resource": "/network/cellulars",
                "__request": {
                  "destination": "01:0c:29:1c:e8:04",
                  "createdAt": "2014-12-17T06:27:58.220Z",
                  "finishedAt": null,
                  "timeout": 36000,
                  "status": "created",
                  "progress": 0,
                  "result": null
                }
              }
            ]
          }
        ]

### Create a job [POST]
The request for POST has following attributes:

- **destinations** (required, array|string): Create job for whom. If passed an array it will automatically expand for you and create requests per destination.
- **message** (required, SanjiMessage): A standard Sanji Message(request) must include `method`, `resource`
- **options.timeout** (optional, integer): Set requests' timeout

Reboot 3 devices `00:0c:29:1c:e8:01`, `00:0c:29:1c:e8:02`, `00:0c:29:1c:e8:03` at once.

+ Request (application/json; charset=utf-8)

        {
          "destinations": ["00:0c:29:1c:e8:01", "00:0c:29:1c:e8:02", "00:0c:29:1c:e8:03"],
          "message": {
            "method": "get",
            "resource": "/system/time"
          }
        }

+ Response 200 (application/json; charset=utf-8)

        {
          "id": 123145,
          "createdAt": "2014-12-17T06:27:58.220Z",
          "finishedAt": null,
          "status": "dispatching",
          "progress": 0,
          "totalCount": 3,
          "doneCount": 0,
          "errorCount": 0,
          "requests": [
            {
              "id": 8330,
              "method": "post",
              "resource": "/system/reboot",
              "__request": {
                "destination": "00:0c:29:1c:e8:01",
                "createdAt": "2014-12-17T06:27:58.220Z",
                "finishedAt": null,
                "timeout": 36000,
                "progress": 0,
                "status": "resolved",
                "result": null
              }
            },
            {
              "id": 34534,
              "method": "post",
              "resource": "/system/reboot",
              "__request": {
                "destination": "00:0c:29:1c:e8:02",
                "createdAt": "2014-12-17T06:27:58.220Z",
                "finishedAt": null,
                "timeout": 36000,
                "progress": 0,
                "status": "created",
                "result": null
              }
            },
            {
              "id": 2323,
              "method": "post",
              "resource": "/system/reboot",
              "__request": {
                "destination": "00:0c:29:1c:e8:03",
                "createdAt": "2014-12-17T06:27:58.220Z",
                "finishedAt": null,
                "timeout": 36000,
                "progress": 0,
                "status": "created",
                "result": null
              }
            }
          ]
        }

## Job [/jobs/{id}]
Single job information

+ Parameters
    + id (required, number, `12345`) ... ID of the job in the form of a integer.

The response for GET has following attributes:

- **progress** (integer, `0`): Current progres of all requests in this job.
- **status** (string, `pending`): Job's current status.
- **timeout** (integer, `infinity`): Set job's timeout.
- **createdAt** (string, `currenttime`): Job's creation time.
- **finishedAt** (string, `null`): Job's finish time.
- **totalCount** (integer): Total count of requests.
- **doneCount** (integer): Done count of requests.
- **errorCount** (integer): Error count of requests.
- **requests** (array): Requests in this job.

### Retrieve a job information [GET]
Get job's current status and requests contains.

+ Response 200 (application/json; charset=utf-8)

        {
          "id": 123145,
          "createdAt": "2011-12-19T15:28:46.493Z",
          "finishedAt": "2011-12-19T15:55:46.493Z",
          "status": "dispatching",
          "progress": 100,
          "totalCount": 5,
          "doneCount": 3,
          "errorCount": 2,
          "requests": [2323]
        }


## Request Collection [/requests]
A set of Requests meta information.

### Retrieve Request [GET]
Get all current exist requests.

+ Response 200 (application/json; charset=utf-8)

        [
          {
            "id": 2323,
            "method": "post",
            "resource": "/system/reboot",
            "__request": {
              "destination": "00:0c:29:1c:e8:03",
              "createdAt": "2014-12-17T06:27:58.220Z",
              "finishedAt": null,
              "timeout": 36000,
              "status": "created",
              "progress": 0,
              "result": null
            }
          },
          {
            "id": 12414,
            "method": "post",
            "resource": "/system/reboot",
            "__request": {
              "destination": "00:0c:29:1c:e8:04",
              "createdAt": "2014-12-17T06:27:58.220Z",
              "finishedAt": null,
              "timeout": 36000,
              "status": "created",
              "progress": 0,
              "result": null
            }
          }
        ]


### Create a request [POST]
The request for POST has following attributes:

- **destination** (optional, string): Create request for whom (default: localhost). If you want to send to many please create a **Job**.
- **message** (required, SanjiMessage): A standard Sanji Message(request) must include `method`, `resource`
- **options.timeout** (optional, integer): Set requests' timeout

The response for POST has following attributes:
- **requests** (array): IDs of requests belongs to this job.

+ Request (application/json; charset=utf-8)

        {
          "destination": "cg-1122334455aa",
          "message": {
            "method": "get",
            "resource": "/system/status",
            "data": {
              "test": "reqRequestData"
            }
          }
        }

+ Response 200 (application/json; charset=utf-8)

        {
          "id": 2323,
          "method": "get",
          "resource": "/system/status",
          "data": {
            "test": "reqRequestData"
          },
          "__request": {
            "destination": "AA-BB-CC-DD-11-22",
            "createdAt": "2014-12-17T06:27:58.220Z",
            "finishedAt": null,
            "timeout": 36000,
            "status": "created",
            "progress": 0,
            "result": null
          }
        }


## Request [/requests/{id}]
Request is a command/data/event from server to client (one-to-one).

+ Parameters
    + id (required, number, `2323`) ... ID of the request in the form of a integer.

### Retrieve a request information [GET]

The response for GET has following attributes:

Basically, just extend original *Sanji Message (one-to-one)* with adding a property: `__request` for dispatching/monitoring it.

- **id** (integer): Sanji Message ID.
- **method** (enum): Sanji Message's method field.
- **resource** (string): Sanji Message's resource field.
- **data** (object): Sanji Message's data field.
- **__request.destination** (string): This Sanji Message is belong to whom.
- **__request.createdAt** (datetime): Creatation time of request.
- **__request.finishedAt** (datetime): Finish time of request.
- **__request.status** (string): Current status. (created, dispatching, resolved, timeout, error)
- **__request.progress** (object): Progress.
- **__request.result** (object): Result of this request. (null if status != resolved)


+ Response 200 (application/json; charset=utf-8)

        {
          "id": 2323,
          "method": "post",
          "resource": "/system/reboot",
          "__request": {
            "destination": "00:0c:29:1c:e8:03",
            "createdAt": "2014-12-17T06:27:58.220Z",
            "finishedAt": null,
            "timeout": 36000,
            "status": "created",
            "progress": 0,
            "result": null
          }
        }


# Group Schedule
Notes related resources of the **Schedule API**

## Schedule Collection [/system/schedule]
### List all scheduled items [GET]

The Collection response has following attributes:

+ Response 200 (application/json)

        [
            {
                "id":1,
                "enable": 0,
                "alias": "reboot",
                "command": "reboot",
                "schedule": "0 0 1 1,3,5,7,9,11 *",
                "executer": "root"
            },
            {
                "id":2,
                "enable": 0,
                "alias": "upgrade",
                "command": "upgrade-firmware",
                "schedule": "0 0 1 2,6,10 *",
                "executer": "root"
            }
        ]

### Update some scheduled items [PUT]

The collection request/response for update has following attributes:

+ Request (application/json)

        [
            {
                "id":1,
                "enable": 0,
                "alias": "reboot",
                "command": "reboot",
                "schedule": "0 0 3 1,3,5,7,9,11 *",
                "executer": "root"
            },
            {
                "id":2,
                "enable": 0,
                "alias": "upgrade",
                "command": "upgrade-firmware",
                "schedule": "0 0 2 2,6,10 *",
                "executer": "root"
            }
        ]

+ Response 200 (application/json)

        [
            {
                "id":1,
                "enable": 0,
                "alias": "reboot",
                "command": "reboot",
                "schedule": "0 0 3 1,3,5,7,9,11 *",
                "executer": "root"
            },
            {
                "id":2,
                "enable": 0,
                "alias": "upgrade",
                "command": "upgrade-firmware",
                "schedule": "0 0 2 2,6,10 *",
                "executer": "root"
            }
        ]


## Schedule [/system/schedule/{id}]
A single Schedule object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Scheduled item to perform action with. Has example value.

### Retrieve an Scheduled item [GET]

The response for GET has following attributes:

- **id** (required, number, `1`): Identifier for a scheduled item.
- **enable** (required, number, `1`): Indicate if the item should be scheduled (`1`) or not (`0`).
- **alias** (optional, string, `reboot`): Indicate the alias of the scheduled item.
- **command** (required, string, `reboot`): Indicate the command to be scheduled.
- **schedule** (required, string, `0 0 1 * *`): Schedule time with crontab format.
- **executer** (required, string, `root`): Executer for the scheduled item.

+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            {
                "id":1,
                "enable": 0,
                "alias": "reboot",
                "command": "reboot",
                "schedule": "0 0 3 1,3,5,7,9,11 *",
                "executer": "root"
            }

### Update an Scheduled Item [PUT]

The request for PUT has following attributes:

- **id** (required, number, `1`): Identifier for a scheduled item.
- **enable** (required, number, `1`): Indicate if the item should be scheduled (`1`) or not (`0`).
- **alias** (optional, string, `reboot`): Indicate the alias of the scheduled item.
- **command** (required, string, `reboot`): Indicate the command to be scheduled.
- **schedule** (required, string, `0 0 1 * *`): Schedule time with crontab format.
- **executer** (required, string, `root`): Executer for the scheduled item.

The response for PUT is same as that for GET.

The error response has following attributes:

- **status** (required, number, `1100`): Status code for error message.
- **message** (required, string): Error message in English.

+ Request (application/json)

        {
            "enable": 0,
            "alias": "reboot",
            "command": "reboot",
            "schedule": "0 0 3 1,3,5,7,9,11 *",
            "executer": "root"
        }

+ Response 200 (application/json)

        {
            "id":1,
            "enable": 0,
            "alias": "reboot",
            "command": "reboot",
            "schedule": "0 0 3 1,3,5,7,9,11 *",
            "executer": "root"
        }

+ Response 404 (application/json)

        {
            "status": 8101,
            "message": "Item not found!"
        }
